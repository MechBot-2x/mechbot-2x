# CI/CD Pipeline - MechBot 2.0x
# Equipo Técnico - Configuración para GitLab CI/CD

stages:
  - validate
  - test
  - build
  - deploy

variables:
  DOCKER_IMAGE: registry.gitlab.com/mechbot-2x/core
  KUBE_NAMESPACE: mechbot-prod
  TF_STATE_BUCKET: mechbot-tfstate

# Pipeline de control de calidad
quality-gate:
  stage: validate
  image: python:3.10-slim
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: never
    - when: always
  script:
    - pip install ruff mypy black
    - ruff check .
    - mypy src --strict
    - black --check src tests
  cache:
    paths:
      - .cache

# Pipeline de pruebas
unit-tests:
  stage: test
  image: python:3.10
  services:
    - postgres:13-alpine
    - redis:alpine
  variables:
    POSTGRES_DB: mechbot_test
    POSTGRES_USER: runner
    POSTGRES_PASSWORD: ""
    POSTGRES_HOST_AUTH_METHOD: trust
  script:
    - pip install -e .[test]
    - pytest -v --cov=src --cov-report=xml
  artifacts:
    reports:
      cobertura: coverage.xml
    paths:
      - htmlcov/
  cache:
    paths:
      - .venv/
    key: $CI_COMMIT_REF_SLUG

integration-tests:
  stage: test
  image: docker:20.10
  services:
    - docker:20.10-dind
  script:
    - docker-compose -f docker-compose.test.yml up --abort-on-container-exit --exit-code-from tester
  dependencies:
    - unit-tests

# Pipeline de construcción
build-containers:
  stage: build
  image: docker:20.10
  services:
    - docker:20.10-dind
  variables:
    DOCKER_BUILDKIT: 1
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin
    - docker build --pull -t $DOCKER_IMAGE:$CI_COMMIT_SHA .
    - docker push $DOCKER_IMAGE:$CI_COMMIT_SHA
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

# Pipeline de despliegue
deploy-staging:
  stage: deploy
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  environment:
    name: staging
    url: https://staging.mechbot.tech
  script:
    - aws eks update-kubeconfig --name mechbot-staging
    - helm upgrade --install mechbot ./charts
      --namespace $KUBE_NAMESPACE
      --set image.tag=$CI_COMMIT_SHA
      --values ./charts/values-staging.yaml
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

deploy-production:
  stage: deploy
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  environment:
    name: production
    url: https://mechbot.tech
  before_script:
    - apt-get update && apt-get install -y openssl
    - openssl enc -d -aes-256-cbc -in kubeconfig.enc -out kubeconfig -k $KUBE_KEY
  script:
    - kubectl apply -f k8s/production --kubeconfig=kubeconfig
    - kubectl rollout status deployment/mechbot -n $KUBE_NAMESPACE
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/

# Pipeline de seguridad
security-scan:
  stage: deploy
  image: aquasec/trivy:latest
  script:
    - trivy fs --security-checks vuln,config .
    - trivy image --exit-code 1 $DOCKER_IMAGE:$CI_COMMIT_SHA
  allow_failure: true
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
