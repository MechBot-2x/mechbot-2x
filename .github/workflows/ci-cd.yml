name: MechBot 2.0x 
on:
  push:
    branches: [ main, dev ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ '*' ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quality-assurance:
    name: Quality Gate
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Configure Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: '**/requirements.txt'

      - name: Install Core Dependencies
        run: |
          python -m pip install --upgrade pip wheel
          pip install -e .[test,security]
          pip install ruff==0.3.7 mypy==1.8.0

      - name: Environment Setup
        run: |
          cp env.sample .env
          echo "MECHBOT_ENV=ci" >> .env
          echo "PYTHONPATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV

      - name: Static Analysis
        run: |
         echo "=== RUFF ==="
         ruff check --config=pyproject.toml src/ tests/
    
          echo "=== MYPY ==="
          mypy --config-file=pyproject.toml src/

      - name: Unit Tests
        run: |
          pytest \
            --cov=src \
            --cov-report=xml \
            --cov-report=term \
            --durations=10 \
            tests/unit/

      - name: Security Scan
        run: |
          pip install safety
          safety check --full-report
          bandit -r src/

      - name: Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true

  integration-test:
    name: Integration Suite
    needs: quality-assurance
    runs-on: ubuntu-22.04
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: test
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v4
      - run: |
          docker-compose -f docker-compose.test.yml up -d
                   pytest tests/integration/
